"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
import sys

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-g(5^f)v&#mz*3)ga&=dp0@$3yeu&$=jdr&g!gth(tt*m0u1qh5'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['10.91.210.1', '192.168.1.229']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Local Apps
    'event',
    'authentication',
    'church_group',
    'user',

    # Third-party Apps
    'rest_framework',
    'rest_framework.authtoken',
    'dj_rest_auth',
    'django_filters',

    # allauth to register users
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'es-es'

TIME_ZONE = 'America/Havana'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static/'),
]
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'authentication.CustomUser'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        #'rest_framework.authentication.SessionAuthentication'
    ],

}


# dj-rest-auth config
REST_AUTH = {
    'USER_DETAILS_SERIALIZER': 'authentication.serializers.CustomUserDetailsSerializer',
}


# allauth config
SITE_ID = 1
ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_LOGIN_METHODS = {'email'}
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']
AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
)


# cors
CORS_ALLOW_ALL_ORIGINS = True


# Logging configuration
LOG_DIR = Path(BASE_DIR) / "logs"
LOG_DIR.mkdir(exist_ok=True)

apps = [
    'event',
    'authentication',
    'church_group',
    'user',
]

# Create individual log folders per app
for app in apps:
    (LOG_DIR / app).mkdir(exist_ok=True)

IS_TESTING = 'test' in sys.argv

if IS_TESTING:
    # In test mode, suppress all file logging
    null_handler_config = {
        "class": "logging.NullHandler",
    }

    handlers = {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
            "level": "CRITICAL",  # Only critical errors will be shown in console during tests
        },
        "debug_file": null_handler_config,
        "info_file": null_handler_config,
        "warning_file": null_handler_config,
        "error_file": null_handler_config,
    }

    for app in apps:
        handlers[f"{app}_debug"] = null_handler_config
        handlers[f"{app}_info"] = null_handler_config
        handlers[f"{app}_warning"] = null_handler_config
        handlers[f"{app}_error"] = null_handler_config

else:
    # Handlers for development and production
    handlers = {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
            "level": "DEBUG",
        },
        "debug_file": {
            "class": "logging.FileHandler",
            "filename": LOG_DIR / "debug.log",
            "formatter": "verbose",
            "level": "DEBUG",
        },
        "info_file": {
            "class": "logging.FileHandler",
            "filename": LOG_DIR / "info.log",
            "formatter": "verbose",
            "level": "INFO",
        },
        "warning_file": {
            "class": "logging.FileHandler",
            "filename": LOG_DIR / "warning.log",
            "formatter": "verbose",
            "level": "WARNING",
        },
        "error_file": {
            "class": "logging.FileHandler",
            "filename": LOG_DIR / "error.log",
            "formatter": "verbose",
            "level": "ERROR",
        },
        **{
            f"{app}_debug": {
                "class": "logging.FileHandler",
                "filename": LOG_DIR / app / "debug.log",
                "formatter": "verbose",
                "level": "DEBUG",
            }
            for app in apps
        },
        **{
            f"{app}_info": {
                "class": "logging.FileHandler",
                "filename": LOG_DIR / app / "info.log",
                "formatter": "verbose",
                "level": "INFO",
            }
            for app in apps
        },
        **{
            f"{app}_warning": {
                "class": "logging.FileHandler",
                "filename": LOG_DIR / app / "warning.log",
                "formatter": "verbose",
                "level": "WARNING",
            }
            for app in apps
        },
        **{
            f"{app}_error": {
                "class": "logging.FileHandler",
                "filename": LOG_DIR / app / "error.log",
                "formatter": "verbose",
                "level": "ERROR",
            }
            for app in apps
        },
    }

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,

    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "[{levelname}] {message}",
            "style": "{",
        },
    },

    "handlers": handlers,

    "loggers": {
        # Default Django error logging
        "django": {
            "handlers": ["console", "error_file"],
            "level": "ERROR",
            "propagate": True,
        },
        # Logs errors from HTTP requests (e.g., 500 errors)
        "django.request": {
            "handlers": ["console", "error_file"],
            "level": "ERROR",
            "propagate": False,
        },
        # Handles HTTP request logs like "GET /path"
        "django.server": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        # General system logger
        "system_logger": {
            "handlers": ["console", "debug_file", "info_file", "warning_file", "error_file"],
            "level": "DEBUG",
            "propagate": False,
        },
        # One logger per application
        **{
            app: {
                "handlers": [
                    "console",
                    f"{app}_debug",
                    f"{app}_info",
                    f"{app}_warning",
                    f"{app}_error",
                ],
                "level": "DEBUG",
                "propagate": False,
            }
            for app in apps
        }
    },
}